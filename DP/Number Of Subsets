#include <bits/stdc++.h> 

int helper(int idx, vector<int>& nums, int target, vector<vector<int>>& dp)
{
    if(idx == 0){
        if(target == 0 and nums[0] == 0) return 2;
        if(target == 0 or target == nums[0]) return 1;
        return 0;
    }
    if(dp[idx][target] != -1) return dp[idx][target];

    int pick = 0;
    if(nums[idx] <= target)
    {
        pick = helper(idx -1 , nums, target - nums[idx], dp);
    }
    int notPick = helper(idx - 1, nums, target, dp);
    return dp[idx][target] = pick + notPick;
}

int findWays(vector<int> &nums, int tar)
{
    // Write your code here
    int n = nums.size();
    vector<vector<int>>dp(n, vector<int>(tar + 1, -1));
    return helper(n - 1, nums, tar, dp);
    // for(int i = 0; i < n; i++) dp[i][0] = 1;
    // if(nums[0] <= tar) dp[0][nums[0]] = 1;
    // if(nums[0] == 0) dp[0][0] = 2; 


    // for(int i = 1; i < n; i++)
    // {
    //     for(int j = 1; j <= tar; j++)
    //     {
    //         int pick = 0;
    //         if(nums[i] <= j)
    //         {
    //             pick = dp[i -1][j - nums[i]];
    //         }
    //         int notPick = dp[i-1][j];
    //         dp[i][j] = pick + notPick;
    //     }
    // }
    // return dp[n-1][tar];
}
