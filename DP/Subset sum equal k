#include <bits/stdc++.h> 

// int helper(int idx, int target, vector<int>& arr, vector<vector<int>>&dp)
// {
//     if(target == 0) return 1;
//     if(idx == 0) return arr[idx] == target;
//     if(dp[idx][target] != -1) return dp[idx][target];

//     bool take = 0;
//     if(arr[idx] <= target) take = helper(idx - 1, target-arr[idx], arr, dp);

//     bool notTake = helper(idx - 1, target, arr, dp);

//     return dp[idx][target] = take | notTake;
// }

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<bool>>dp(n , vector<bool >(k+1, 0));

    for(int i = 0; i < n; i++) dp[i][0] = 1;
    dp[0][arr[0]] = 1;

    for(int idx = 1; idx < n; idx++)
    {
        for(int target = 1; target <= k; target++)
        {
            int take = 0;
            if(arr[idx] <= target) take = dp[idx - 1][target-arr[idx]];

            int notTake = dp[idx - 1][target];

            dp[idx][target] = take | notTake;
        }
    }
    return dp[n-1][k];


    // return helper(n-1, k, arr, dp);
}
