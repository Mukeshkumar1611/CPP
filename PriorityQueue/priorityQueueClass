// Class Priority Queue

#include <iostream>
#include <vector>
using namespace std;

class PriorityQueue
{
    vector<int> pq;

public:
    PriorityQueue()
    {
    }

    bool isEmpty()
    {
        return pq.size() == 0;
    }

    int getSize()
    {
        return pq.size();
    }

    int getMin()
    {
        if (isEmpty())
        {
            return 0;
        }
        return pq[0];
    }

    void insert(int element)
    {
        pq.push_back(element);
        int childIdx = pq.size() - 1;

        while (childIdx > 0)
        {
            int parentIdx = (childIdx - 1) / 2;
            if (pq[parentIdx] > pq[childIdx])
            {
                int temp = pq[parentIdx];
                pq[parentIdx] = pq[childIdx];
                pq[childIdx] = temp;
            }
            else
            {
                break;
            }
            childIdx = parentIdx;
        }
    }
    
     int removeMin()
    {
        if (isEmpty())
        {
            return INT_MIN;
        }
        int ans = pq[0];
        pq[0] = pq[pq.size() - 1];
        pq.pop_back();

        int parentIdx = 0;
        int leftChildIdx = 2 * parentIdx + 1;
        int rightCHildIdx = 2 * parentIdx + 2;

        while (leftChildIdx < pq.size())
        {
            int minIdx = parentIdx;
            if (pq[minIdx] > pq[leftChildIdx])
            {
                minIdx = leftChildIdx;
            }
            if (rightCHildIdx < pq.size() and pq[minIdx] > pq[rightCHildIdx])
            {
                minIdx = rightCHildIdx;
            }
            if (minIdx == parentIdx)
            {
                break;
            }
            swap(pq[minIdx], pq[parentIdx]);
            parentIdx = minIdx;

            leftChildIdx = 2 * parentIdx + 1;
            rightCHildIdx = 2 * parentIdx + 2;
        }
        return ans;
    }
};

int main()
{
    PriorityQueue pq;
    cout << pq.getSize() << endl;
    cout << pq.isEmpty() << endl;
    pq.insert(1);
    pq.insert(2);
    pq.insert(3);
    pq.insert(4);
    pq.insert(5);
    cout << pq.getSize() << endl;
    cout << pq.isEmpty() << endl;
    return 0;
}
