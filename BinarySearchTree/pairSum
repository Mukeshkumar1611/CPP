// Pair sum in BST

#include <iostream>
#include <queue>
#include <bits/stdc++.h>
using namespace std;

template <typename T>
class BinaryTreeNode
{
public:
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data)
    {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

BinaryTreeNode<int> *takeInput()
{
    int rootData;
    cout << "Enter root data" << endl;
    cin >> rootData;
    if (rootData == -1)
    {
        return NULL;
    }

    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int> *> pendingNodes;
    pendingNodes.push(root);

    while (pendingNodes.size() != 0)
    {
        BinaryTreeNode<int> *front = pendingNodes.front();
        pendingNodes.pop();

        int leftChild;
        cout << "Enter left child of " << front->data << endl;
        cin >> leftChild;
        if (leftChild != -1)
        {
            BinaryTreeNode<int> *leftC = new BinaryTreeNode<int>(leftChild);
            front->left = leftC;
            pendingNodes.push(leftC);
        }

        int rightChild;
        cout << "Enter right child of " << front->data << endl;
        cin >> rightChild;
        if (rightChild != -1)
        {
            BinaryTreeNode<int> *rightC = new BinaryTreeNode<int>(rightChild);
            front->right = rightC;
            pendingNodes.push(rightC);
        }
    }
    return root;
}

void convertToArray(BinaryTreeNode<int> *root, vector<int> &output)
{
    if (root == NULL)
    {
        return;
    }
    output.push_back(root->data);
    convertToArray(root->left, output);
    convertToArray(root->right, output);
}

void pairSum(BinaryTreeNode<int> *root, int sum)
{
    if (root == NULL)
    {
        return;
    }
    vector<int> output;
    convertToArray(root, output);

    sort(output.begin(), output.end());

    int i = 0;
    int j = output.size() - 1;

    while (i < j)
    {
        if (output[i] + output[j] == sum)
        {
            cout << output[i] << " " << output[j] << endl;
            i++;
            j--;
        }
        else if (output[i] + output[j] > sum)
        {
            j--;
        }
        else
        {
            i++;
        }
    }
}

int main()
{
    BinaryTreeNode<int> *root = takeInput();
    int sum;
    cout << "Enter sum : ";
    cin >> sum;
    pairSum(root, sum);
    delete root;
}
