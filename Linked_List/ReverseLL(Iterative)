// Reverse LL (Iterative)

#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *next;
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
};

Node *takeinput()
{
    int data;
    cin >> data;
    Node *head = NULL, *tail = NULL;
    while (data != -1)
    {
        Node *newnode = new Node(data);
        if (head == NULL)
        {
            head = newnode;
            tail = newnode;
        }
        else
        {
            tail->next = newnode;
            tail = newnode;
        }
        cin >> data;
    }
    return head;
}

void print(Node *head)
{
    Node *temp = head;

    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }

    cout << "\n";
}

Node *reverseLinkedList(Node *head)
{
    Node *currNode = head;
    Node *prev = NULL;
    while (currNode != NULL)
    {
        Node *next = currNode->next;
        currNode->next = prev;
        prev = currNode;
        currNode = next;
    }
    head = prev;
    return prev;
}

int main()
{
    cout << "Enter nodes : ";
    Node *head = takeinput();
    head = reverseLinkedList(head);
    cout << "Reversed LL : ";
    print(head);

    return 0;
}
